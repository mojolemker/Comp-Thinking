# -*- coding: utf-8 -*-
"""
Provide a short description of the program here.

We have created a program that allowsusers to add products,
remove products, update product quantities and prices,
display the current inventory, calculate the total vlalue
of different product categories and search for products.


Include the group number and the name of group members.

Group 4.1 - Josef Lemker, Jimmy Kalyviaris, Ames Wang
"""

from utilities import safe_input
import os
# Use safe_input instead of Python's builtin input function for error-proof numerical inputs
# Example 1:
# value = safe_input("Enter a number: ", "ERROR: Input must be a positive numeric value.", float, 0, None)
# Example 2:
# value = safe_input("Enter a number: ", "ERROR: Input must be an integer between 1 and 100.", int, 1, 100)

if os.path.exists('inventory.csv') == True:
    x = 0

    fh = open('inventory.csv', 'r')

    fh.readline()
    
    items = {}
    item_id = 1
    
    for lines in fh:
        liner = lines.rstrip()
        line = liner.split(',')
        
        desc = {"Name: " : line[1],
            "Category: " : line[2],
            "Price: $": float(line[3]),
            "Quantity: " : int(line[4])
            }
        
        
        items[item_id] = desc
        
        item_id += 1


else:
    items = {}
    item_id = 1
    
stopper = True

print("Welcome to Grocery Store Inventory Management!")

options = """1. (N) Add a new product
2. (R) Remove a product
3. (D) Display a product's inventory
4. (U) Update a product
5. (A) Display all products
6. (V) Calculate total value per category
7. (S) Search for a product
8. (O) Display the options
9. (E) Exit"""

print(options)

while stopper == True:

    inputval = input("Enter Your Choice: ")

   
    if inputval.lower() == 'n' or inputval == '1':
        desc = {}
        desc["Name: "] = input("Name: ")
        desc["Category: "] = input("Category: ")
        desc["Price: $"] = safe_input("Price: ", "ERROR: Price must be a positive number.", float, 0)
        desc["Quantity: "] = safe_input("Quantity: ", "ERROR: Quantity must be a positive integer.", int, 0)
        items[item_id] = desc
        item_id += 1
        print("Item added successfully!")
    
    
    elif inputval.lower() == 'r' or inputval == '2':
        if item_id == 1:
            print("No items to remove")
            continue
        removal = safe_input("Enter the ID of the product to remove: ", "ERROR: Not a valid ID", int, 1, item_id - 1)
        if removal in items:
            del items[removal]
            print("Item removed successfully!")
    
    elif inputval == '3' or inputval.lower() == 'd':
        if item_id == 1:
            print("No items to display")
            continue
        displayid = safe_input("Enter the ID of the product to display: ", "ERROR: Not a valid ID", int, 1, item_id - 1)
        tempdict = items[displayid]
        print(f"ID: {displayid}\nName: {tempdict['Name: ']}\nCategory: {tempdict['Category: ']}\nPrice: ${tempdict['Price: $']}\nQuantitiy: {tempdict['Quantity: ']}")
        continue
    
    elif inputval == '4' or inputval.lower() == 'u':
        if item_id == 1:
            print("No items to update")
            continue
        updateid = safe_input("Enter the ID of the product to update: ", "ERROR: Not a valid ID", int, 1, item_id - 1)
        tempdict = items[updateid]
        newprice = safe_input(f"Enter the new price for '{tempdict['Name: ']}': $", "ERROR: Price must be a positve number.", float, 0)
        newquant = safe_input(f"Enter the new quantity for '{tempdict['Quantity: ']}': ", "ERROR: Quantity must be a positve integer.", int, 0)
        tempdict['Price: $'] = newprice
        tempdict['Quantity: '] = newquant
        items[updateid] = tempdict
        continue
    
    elif inputval == '5' or inputval.lower() == 'a':
        if item_id == 1:
            print("No items to show.")
            continue
        print("%-4s%-35s%-18s%-6s%-8s" % ("ID", "Name", "Category", "Price", "Quanity"))
        for vals in items:
            tempdict = items[vals]
            print("%-4s%-35s%-19s%-5s%7s" % (vals, tempdict['Name: '], tempdict['Category: '], tempdict['Price: $'], tempdict['Quantity: ']))
        continue
    
    elif inputval.lower() == 'v' or inputval == '6':
        if item_id == 1:
            print("No items to show.")
            continue
            
        print('%-20s%-20s' % ("Category", "Value"))
        categories = []
        for vals in items:
            tempdict = items[vals]
            if tempdict['Category: '] not in categories:
                categories.append(tempdict['Category: '])
        for cats in categories:
            catprice = 0
            catquant = 0
            for vals in items:
                tempdict = items[vals]
                if tempdict['Category: '] == cats:
                    catprice += tempdict['Price: $']
                    catquant += tempdict['Quantity: ']
            print('%-20s$%-20.2f' % (cats, catprice * catquant))
        continue
                    
    elif inputval.lower() == 's' or inputval == '7':
        if item_id == 1:
            print("No items to show.")
            continue
        
        found = False
        item_name = input("Enter the name of the product to search: ")
        for vals in items:
            tempdict = items[vals]
            name = tempdict['Name: ']
            for letters in range(0, len(name) - len(item_name) + 1):
                tempname = name[letters : (letters + len(item_name))]
                if tempname.lower() == item_name.lower():
                    print(f"ID: {vals}\nName: {tempdict['Name: ']}\nCategory: {tempdict['Category: ']}\nPrice: ${tempdict['Price: $']}\nQuantity: {tempdict['Quantity: ']}")
                    found = True
        if found == False:
            print(f"No item with name {item_name} was found.")
        continue
        
    
    elif inputval == '8' or inputval == '0':
            print(options)
    
    elif inputval.lower() == 'e' or inputval == '9':
        stopper = False
    
    
    else:
        print("Invalid option entered. Enter 8 or 0 to see the otions.")
        continue
    

# Set up a dictionary for items

# Write a loop that iterates until the user decides to exit the program
#    ...

fh = open("inventory.csv", 'w')


file_string = ("ID,name,category,price,quantity\n")


for vals in items:
    tempdict = items[vals]
    file_string +=(f"{vals},{tempdict['Name: ']},{tempdict['Category: ']},{tempdict['Price: $']},{tempdict['Quantity: ']}\n")

fh.write(file_string)

fh.close()

print("Goodbye!")
